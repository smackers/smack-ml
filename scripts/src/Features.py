import subprocess, shlex
from sklearn import svm
import pickle, random, glob2
import numpy as np

class FeatureGeneration(object):
	def __init__(self):
		pass

	#Purpose: Use tool1 (Yulia-clang) to generate feature vectors of length 20
	def RunTool1(self,input_file,output_roles,output_metrics):
		subprocess.call(['bash','../sh/tool1.sh',input_file,output_roles,output_metrics])

	#Purpose: Use tool1 (Thomas-sloopy) to generate feature vectors of length 13
	def RunTool2(self,input_file,output_file):
		subprocess.call(['bash','../sh/tool2.sh',input_file,output_file])

	def Filesize(self,input_file):
			subproces.call(input_file)

	#Extracting file based on FileExtension
	def ExtractFiles(self,pathname,extension):
		filetype = glob2.glob(pathname + '/*.' + extension)
		return filetype

	#Purpose: Create a dictionary with a type-match key as labels
	def Formatting(self,content, n, SplitParameter):
		dic = {}

		for i in range(n):
			listed = content[i].strip().split(SplitParameter)
			temp = map(float,listed[1:])

			#if the features vectors are not of equal length (precaution fo	r feature matrix)
			if SplitParameter == ' ' and len(temp) == 20:
				dic[listed[0]] = temp
			elif SplitParameter == '\t' and len(temp) == 13:
				dic[listed[0]] = temp
		return dic

	#Purpose: to combine features from tool 2 with the ones of tool 1
	def MergeFeatures(self, tool1, tool2):
		for filename in tool2:
			filename1 = '../..' + filename[13:] #formatting needed to match the FILENAME
			if filename1 in tool1:
				tool1[filename1].extend(tool2[filename])
		return tool1

	def MainFunctionality(self,pathname,file1,file2,file3):
		# ---- separate files
		c_files = self.ExtractFiles(pathname,'c')
		i_files = self.ExtractFiles(pathname,'i')
		print len(c_files), len(i_files)
		filenames = c_files + i_files
		for filename in filenames:
			filename = '../../..'+filename
			self.RunTool1(filename,file1,file2)
			self.RunTool2(filename,file3)

		# ---- formatting features generated above
		with open(file1,'r') as f:
			content1 = f.readlines()

		content_tool1 = [x.strip() for x in content1]
		feature_dict_tool1 = self.Formatting(content_tool1, len(content_tool1), ' ')

		with open(file3,'r') as g:
			content2 = g.readlines()

		content_tool2 = [x.strip() for x in content2]
		feature_dict_tool2 = self.Formatting(content_tool2,len(content_tool2), '\t')

		# ---- merging feature vectors generated by two tools based on FILENAME
		merged_dict = self.MergeFeatures(feature_dict_tool1, feature_dict_tool2)
		return merged_dict
